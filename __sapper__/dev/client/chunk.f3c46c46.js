import { c as init, a as assign, l as createText, d as createElement, m as claimText, e as claimElement, f as children, g as detachNode, h as addLoc, p as addListener, q as setAttribute, i as insert, n as append, o as setData, r as wrapTransition, s as removeListener, t as groupOutros, u as run, v as destroyEach, k as flush, b as protoDev } from './chunk.ed69ed00.js';

function fade ( node, ref ) {
	var delay = ref.delay; if ( delay === void 0 ) delay = 0;
	var duration = ref.duration; if ( duration === void 0 ) duration = 400;

	var o = +getComputedStyle( node ).opacity;

	return {
		delay: delay,
		duration: duration,
		css: function (t) { return ("opacity: " + (t * o)); }
	};
}

/* src/routes/index.html generated by Svelte v2.16.1 */

function media(vistorias, manha, tarde) {
  let normais = vistorias.filter(obj => obj.normal).length;
  let fechadas = vistorias.filter(obj => !obj.normal).length;
  return Math.trunc(
    (totalDuration(manha, tarde) - fechadas * 2) / (normais - 1)
  );
}

function timeObjAsStr(time) {
  time.h = String(time.h).padStart(2, "0");
  time.m = String(time.m).padStart(2, "0");
  return `${time.h}:${time.m}`;
}

function timeStrAsObj(time) {
  let [hours, minutes] = time.split(":");
  return { h: Number(hours), m: Number(minutes) };
}

function timeDiff(time, duration) {
  time = timeStrAsObj(time);
  if (time.m + duration >= 60) {
    let hours = Math.trunc((time.m + duration) / 60);
    time.h += hours;
		time.m = time.m + duration - hours * 60;
		// console.log(`Avançou: ${time.h}:${time.m}`);
	} else if (time.m + duration < 0) {
		time.h -= 1;
		time.m = 60 + duration;
		// console.log(`Retornou: ${time.h}:${time.m}`);
  } else {
		time.m += duration;
		// console.log(`Normal: ${time.h}:${time.m}`);
  }
  return timeObjAsStr(time);
}

function getDuration(start, finish) {
  start = timeStrAsObj(start);
  finish = timeStrAsObj(finish);
  // returns the duration in minutes between start and finish.
  return (finish.h - (start.h + 1)) * 60 + (60 - start.m) + finish.m;
}

function totalDuration(manha, tarde) {
  let durationManha = getDuration(manha.inicio, manha.fim);
  let durationTarde = getDuration(tarde.inicio, tarde.fim);
  let minutos = 0;
  if (manha.ativado && tarde.ativado) {
    minutos = durationManha + durationTarde;
  } else if (manha.ativado && !tarde.ativado) {
    minutos = durationManha;
  } else if (!manha.ativado && tarde.ativado) {
    minutos = durationTarde;
  }
  return minutos;
}

// Aleatoriedade dos horários (entre n-1 e n+1).
function randomize(time) {
  let diff = Math.trunc(Math.random() * 3) - 1;
  return timeDiff(time, diff);
}

function horaInicio(manha, tarde) {
  if (manha.ativado) {
    return manha.inicio;
  } else if (tarde.ativado) {
    return tarde.inicio;
  } else {
    return "00:00";
  }
}

function horaSaida(manha, tarde, hora) {
  hora = timeStrAsObj(hora);
  if (manha.ativado && tarde.ativado) {
    let manhaFim = timeStrAsObj(manha.fim);
    let tardeInicio = timeStrAsObj(tarde.inicio);
    if (hora.h >= manhaFim.h && hora.m > manhaFim.m && hora.h < tardeInicio.h) {
      return tarde.inicio;
    } else {
      return timeObjAsStr(hora);
    }
  } else {
    return timeObjAsStr(hora);
  }
}

function update(vistorias, manha, tarde) {
  let mediaNormal = media(vistorias, manha, tarde);
  if (vistorias.length > 0) {
    let atual = randomize(horaInicio(manha, tarde));
    vistorias = vistorias.map(vistoria => {
      vistoria.hora = atual;
      if (vistoria.normal) {
        atual = randomize(
          horaSaida(manha, tarde, timeDiff(atual, mediaNormal))
        );
      } else {
        atual = randomize(horaSaida(manha, tarde, timeDiff(atual, 2)));
      }
      return vistoria;
    });
  }
  return vistorias;
}

function showConfig({ config }) {
	return config ? "show" : "hide";
}

function showContent({ config }) {
	return !config ? "show" : "hide";
}

function normais({ vistorias }) {
	return vistorias.filter(obj => obj.normal).length;
}

function fechadas({ vistorias }) {
	return vistorias.filter(obj => obj.normal == false).length;
}

function media_1({ vistorias, manha, tarde }) {
	return media(vistorias, manha, tarde);
}

function update_1({ vistorias, manha, tarde }) {
	return update(vistorias, manha, tarde);
}

function data() {
  return {
    config: false,
    vistorias: [],
    manha: {
      ativado: true,
      inicio: "08:40",
      fim: "11:20"
    },
    tarde: {
      ativado: true,
      inicio: "14:30",
      fim: "17:20"
    }
  };
}
var methods = {
  config() {
    const { config, vistorias, manha, tarde } = this.get();

    if (config) {
      this.set({ config: false });
    } else {
      this.set({ config: true });
    }
    this.set({ vistorias: vistorias });
  },

  add(type) {
    const { config, vistorias, manha, tarde } = this.get();

    let horaEntrada = horaInicio(manha, tarde);
    if (vistorias.length > 0) {
      let vistoriaAnterior = vistorias[vistorias.length - 1];
      if (vistoriaAnterior.normal) {
        horaEntrada = timeDiff(vistoriaAnterior.hora, 15);
      } else {
        horaEntrada = timeDiff(vistoriaAnterior.hora, 2);
      }
    }

    // Registra a vistoria
    this.set({
      vistorias: vistorias.concat({
        id: vistorias.length,
        normal: type,
        hora: horaEntrada
      })
    });
  },

  change(id) {
    const { config, vistorias, ..._ } = this.get();
    this.set({
      vistorias: vistorias.map(vistoria => {
        if (vistoria.id == id) {
          vistoria.normal = !vistoria.normal;
        }
        return vistoria;
      })
    });
  },

  remove(id) {
    const { config, vistorias, ..._ } = this.get();

    this.set({
      vistorias: vistorias.filter(obj => obj.id != id)
    });
  }
};

const file = "src/routes/index.html";

function click_handler_2(event) {
	const { component, ctx } = this._svelte;

	component.remove(ctx.vistoria.id);
}

function click_handler_1(event) {
	const { component, ctx } = this._svelte;

	component.change(ctx.vistoria.id);
}

function click_handler(event) {
	const { component, ctx } = this._svelte;

	component.change(ctx.vistoria.id);
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.vistoria = list[i];
	return child_ctx;
}

function create_main_fragment(component, ctx) {
	var text0, div0, button0, span0, text1, button1, span1, text2, button2, span2, text3, div8, h1, text4, text5, p, strong, text6, i, text7, text8, text9, div7, div3, fieldset0, legend0, text10, text11, label0, text12, input0, text13, br0, text14, br1, text15, div1, label1, text16, text17, input1, input1_updating = false, text18, br2, text19, div2, label2, text20, text21, input2, input2_updating = false, text22, div6, fieldset1, legend1, text23, text24, label3, text25, input3, text26, br3, text27, br4, text28, div4, label4, text29, text30, input4, input4_updating = false, text31, br5, text32, div5, label5, text33, text34, input5, input5_updating = false, text35, text36, div9, table, tr, th0, text37, text38, th1, text39, text40, th2, text41, text42, th3, text43, text44, current;

	function click_handler(event) {
		component.add(true);
	}

	function click_handler_1(event) {
		component.add(false);
	}

	function click_handler_2(event) {
		component.config();
	}

	var if_block0 = (ctx.normais != 0) && create_if_block_2(component, ctx);

	function input0_change_handler() {
		ctx.manha.ativado = input0.checked;
		component.set({ manha: ctx.manha });
	}

	function input1_input_handler() {
		input1_updating = true;
		ctx.manha.inicio = input1.value;
		component.set({ manha: ctx.manha });
		input1_updating = false;
	}

	function input2_input_handler() {
		input2_updating = true;
		ctx.manha.fim = input2.value;
		component.set({ manha: ctx.manha });
		input2_updating = false;
	}

	function input3_change_handler() {
		ctx.tarde.ativado = input3.checked;
		component.set({ tarde: ctx.tarde });
	}

	function input4_input_handler() {
		input4_updating = true;
		ctx.tarde.inicio = input4.value;
		component.set({ tarde: ctx.tarde });
		input4_updating = false;
	}

	function input5_input_handler() {
		input5_updating = true;
		ctx.tarde.fim = input5.value;
		component.set({ tarde: ctx.tarde });
		input5_updating = false;
	}

	var if_block1 = (!(ctx.manha.ativado || ctx.tarde.ativado)) && create_if_block_1(component, ctx);

	var each_value = ctx.vistorias;

	var each_blocks = [];

	for (var i_1 = 0; i_1 < each_value.length; i_1 += 1) {
		each_blocks[i_1] = create_each_block(component, get_each_context(ctx, each_value, i_1));
	}

	function outroBlock(i, detach, fn) {
		if (each_blocks[i]) {
			each_blocks[i].o(() => {
				if (detach) {
					each_blocks[i].d(detach);
					each_blocks[i] = null;
				}
				if (fn) fn();
			});
		}
	}

	return {
		c: function create() {
			text0 = createText("\r\n\r\n");
			div0 = createElement("div");
			button0 = createElement("button");
			span0 = createElement("span");
			text1 = createText("\r\n\t");
			button1 = createElement("button");
			span1 = createElement("span");
			text2 = createText("\r\n\t");
			button2 = createElement("button");
			span2 = createElement("span");
			text3 = createText("\r\n\r\n");
			div8 = createElement("div");
			h1 = createElement("h1");
			text4 = createText("Configurações");
			text5 = createText("\r\n\r\n\t");
			p = createElement("p");
			strong = createElement("strong");
			text6 = createText("Calculadora de Horas ACE ");
			i = createElement("i");
			text7 = createText("v3.2.2.");
			text8 = createText("\r\n\r\n\t");
			if (if_block0) if_block0.c();
			text9 = createText("\r\n\r\n\t");
			div7 = createElement("div");
			div3 = createElement("div");
			fieldset0 = createElement("fieldset");
			legend0 = createElement("legend");
			text10 = createText("Manhã");
			text11 = createText("\r\n\t\t\t\t");
			label0 = createElement("label");
			text12 = createText("Ativado\r\n\t\t\t\t\t");
			input0 = createElement("input");
			text13 = createText("\r\n\t\t\t\t");
			br0 = createElement("br");
			text14 = createText("\r\n\t\t\t\t");
			br1 = createElement("br");
			text15 = createText("\r\n\t\t\t\t");
			div1 = createElement("div");
			label1 = createElement("label");
			text16 = createText("Início:");
			text17 = createText("\r\n\t\t\t\t\t");
			input1 = createElement("input");
			text18 = createText("\r\n\t\t\t\t");
			br2 = createElement("br");
			text19 = createText("\r\n\t\t\t\t");
			div2 = createElement("div");
			label2 = createElement("label");
			text20 = createText("Fim:");
			text21 = createText("\r\n\t\t\t\t\t");
			input2 = createElement("input");
			text22 = createText("\r\n\r\n\t\t");
			div6 = createElement("div");
			fieldset1 = createElement("fieldset");
			legend1 = createElement("legend");
			text23 = createText("Tarde");
			text24 = createText("\r\n\t\t\t\t");
			label3 = createElement("label");
			text25 = createText("Ativado\r\n\t\t\t\t\t");
			input3 = createElement("input");
			text26 = createText("\r\n\t\t\t\t");
			br3 = createElement("br");
			text27 = createText("\r\n\t\t\t\t");
			br4 = createElement("br");
			text28 = createText("\r\n\t\t\t\t");
			div4 = createElement("div");
			label4 = createElement("label");
			text29 = createText("Início:");
			text30 = createText("\r\n\t\t\t\t\t");
			input4 = createElement("input");
			text31 = createText("\r\n\t\t\t\t");
			br5 = createElement("br");
			text32 = createText("\r\n\t\t\t\t");
			div5 = createElement("div");
			label5 = createElement("label");
			text33 = createText("Fim:");
			text34 = createText("\r\n\t\t\t\t\t");
			input5 = createElement("input");
			text35 = createText("\r\n\t");
			if (if_block1) if_block1.c();
			text36 = createText("\r\n\r\n\r\n");
			div9 = createElement("div");
			table = createElement("table");
			tr = createElement("tr");
			th0 = createElement("th");
			text37 = createText("Linha");
			text38 = createText("\r\n\t\t\t");
			th1 = createElement("th");
			text39 = createText("Tipo");
			text40 = createText("\r\n\t\t\t");
			th2 = createElement("th");
			text41 = createText("Hora");
			text42 = createText("\r\n\t\t\t");
			th3 = createElement("th");
			text43 = createText("Excluir");
			text44 = createText("\r\n\t\t");

			for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
				each_blocks[i_1].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			text0 = claimText(nodes, "\r\n\r\n");

			div0 = claimElement(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			button0 = claimElement(div0_nodes, "BUTTON", { class: true, "data-count": true }, false);
			var button0_nodes = children(button0);

			span0 = claimElement(button0_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			span0_nodes.forEach(detachNode);
			button0_nodes.forEach(detachNode);
			text1 = claimText(div0_nodes, "\r\n\t");

			button1 = claimElement(div0_nodes, "BUTTON", { class: true, "data-count": true }, false);
			var button1_nodes = children(button1);

			span1 = claimElement(button1_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			span1_nodes.forEach(detachNode);
			button1_nodes.forEach(detachNode);
			text2 = claimText(div0_nodes, "\r\n\t");

			button2 = claimElement(div0_nodes, "BUTTON", { class: true }, false);
			var button2_nodes = children(button2);

			span2 = claimElement(button2_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			span2_nodes.forEach(detachNode);
			button2_nodes.forEach(detachNode);
			div0_nodes.forEach(detachNode);
			text3 = claimText(nodes, "\r\n\r\n");

			div8 = claimElement(nodes, "DIV", { class: true }, false);
			var div8_nodes = children(div8);

			h1 = claimElement(div8_nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			text4 = claimText(h1_nodes, "Configurações");
			h1_nodes.forEach(detachNode);
			text5 = claimText(div8_nodes, "\r\n\r\n\t");

			p = claimElement(div8_nodes, "P", {}, false);
			var p_nodes = children(p);

			strong = claimElement(p_nodes, "STRONG", {}, false);
			var strong_nodes = children(strong);

			text6 = claimText(strong_nodes, "Calculadora de Horas ACE ");

			i = claimElement(strong_nodes, "I", {}, false);
			var i_nodes = children(i);

			text7 = claimText(i_nodes, "v3.2.2.");
			i_nodes.forEach(detachNode);
			strong_nodes.forEach(detachNode);
			p_nodes.forEach(detachNode);
			text8 = claimText(div8_nodes, "\r\n\r\n\t");
			if (if_block0) if_block0.l(div8_nodes);
			text9 = claimText(div8_nodes, "\r\n\r\n\t");

			div7 = claimElement(div8_nodes, "DIV", { class: true }, false);
			var div7_nodes = children(div7);

			div3 = claimElement(div7_nodes, "DIV", {}, false);
			var div3_nodes = children(div3);

			fieldset0 = claimElement(div3_nodes, "FIELDSET", {}, false);
			var fieldset0_nodes = children(fieldset0);

			legend0 = claimElement(fieldset0_nodes, "LEGEND", { class: true }, false);
			var legend0_nodes = children(legend0);

			text10 = claimText(legend0_nodes, "Manhã");
			legend0_nodes.forEach(detachNode);
			text11 = claimText(fieldset0_nodes, "\r\n\t\t\t\t");

			label0 = claimElement(fieldset0_nodes, "LABEL", {}, false);
			var label0_nodes = children(label0);

			text12 = claimText(label0_nodes, "Ativado\r\n\t\t\t\t\t");

			input0 = claimElement(label0_nodes, "INPUT", { type: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detachNode);
			label0_nodes.forEach(detachNode);
			text13 = claimText(fieldset0_nodes, "\r\n\t\t\t\t");

			br0 = claimElement(fieldset0_nodes, "BR", {}, false);
			var br0_nodes = children(br0);

			br0_nodes.forEach(detachNode);
			text14 = claimText(fieldset0_nodes, "\r\n\t\t\t\t");

			br1 = claimElement(fieldset0_nodes, "BR", {}, false);
			var br1_nodes = children(br1);

			br1_nodes.forEach(detachNode);
			text15 = claimText(fieldset0_nodes, "\r\n\t\t\t\t");

			div1 = claimElement(fieldset0_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			label1 = claimElement(div1_nodes, "LABEL", {}, false);
			var label1_nodes = children(label1);

			text16 = claimText(label1_nodes, "Início:");
			label1_nodes.forEach(detachNode);
			text17 = claimText(div1_nodes, "\r\n\t\t\t\t\t");

			input1 = claimElement(div1_nodes, "INPUT", { type: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detachNode);
			div1_nodes.forEach(detachNode);
			text18 = claimText(fieldset0_nodes, "\r\n\t\t\t\t");

			br2 = claimElement(fieldset0_nodes, "BR", {}, false);
			var br2_nodes = children(br2);

			br2_nodes.forEach(detachNode);
			text19 = claimText(fieldset0_nodes, "\r\n\t\t\t\t");

			div2 = claimElement(fieldset0_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			label2 = claimElement(div2_nodes, "LABEL", {}, false);
			var label2_nodes = children(label2);

			text20 = claimText(label2_nodes, "Fim:");
			label2_nodes.forEach(detachNode);
			text21 = claimText(div2_nodes, "\r\n\t\t\t\t\t");

			input2 = claimElement(div2_nodes, "INPUT", { type: true }, false);
			var input2_nodes = children(input2);

			input2_nodes.forEach(detachNode);
			div2_nodes.forEach(detachNode);
			fieldset0_nodes.forEach(detachNode);
			div3_nodes.forEach(detachNode);
			text22 = claimText(div7_nodes, "\r\n\r\n\t\t");

			div6 = claimElement(div7_nodes, "DIV", {}, false);
			var div6_nodes = children(div6);

			fieldset1 = claimElement(div6_nodes, "FIELDSET", {}, false);
			var fieldset1_nodes = children(fieldset1);

			legend1 = claimElement(fieldset1_nodes, "LEGEND", { class: true }, false);
			var legend1_nodes = children(legend1);

			text23 = claimText(legend1_nodes, "Tarde");
			legend1_nodes.forEach(detachNode);
			text24 = claimText(fieldset1_nodes, "\r\n\t\t\t\t");

			label3 = claimElement(fieldset1_nodes, "LABEL", {}, false);
			var label3_nodes = children(label3);

			text25 = claimText(label3_nodes, "Ativado\r\n\t\t\t\t\t");

			input3 = claimElement(label3_nodes, "INPUT", { type: true }, false);
			var input3_nodes = children(input3);

			input3_nodes.forEach(detachNode);
			label3_nodes.forEach(detachNode);
			text26 = claimText(fieldset1_nodes, "\r\n\t\t\t\t");

			br3 = claimElement(fieldset1_nodes, "BR", {}, false);
			var br3_nodes = children(br3);

			br3_nodes.forEach(detachNode);
			text27 = claimText(fieldset1_nodes, "\r\n\t\t\t\t");

			br4 = claimElement(fieldset1_nodes, "BR", {}, false);
			var br4_nodes = children(br4);

			br4_nodes.forEach(detachNode);
			text28 = claimText(fieldset1_nodes, "\r\n\t\t\t\t");

			div4 = claimElement(fieldset1_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			label4 = claimElement(div4_nodes, "LABEL", {}, false);
			var label4_nodes = children(label4);

			text29 = claimText(label4_nodes, "Início:");
			label4_nodes.forEach(detachNode);
			text30 = claimText(div4_nodes, "\r\n\t\t\t\t\t");

			input4 = claimElement(div4_nodes, "INPUT", { type: true }, false);
			var input4_nodes = children(input4);

			input4_nodes.forEach(detachNode);
			div4_nodes.forEach(detachNode);
			text31 = claimText(fieldset1_nodes, "\r\n\t\t\t\t");

			br5 = claimElement(fieldset1_nodes, "BR", {}, false);
			var br5_nodes = children(br5);

			br5_nodes.forEach(detachNode);
			text32 = claimText(fieldset1_nodes, "\r\n\t\t\t\t");

			div5 = claimElement(fieldset1_nodes, "DIV", { class: true }, false);
			var div5_nodes = children(div5);

			label5 = claimElement(div5_nodes, "LABEL", {}, false);
			var label5_nodes = children(label5);

			text33 = claimText(label5_nodes, "Fim:");
			label5_nodes.forEach(detachNode);
			text34 = claimText(div5_nodes, "\r\n\t\t\t\t\t");

			input5 = claimElement(div5_nodes, "INPUT", { type: true }, false);
			var input5_nodes = children(input5);

			input5_nodes.forEach(detachNode);
			div5_nodes.forEach(detachNode);
			fieldset1_nodes.forEach(detachNode);
			div6_nodes.forEach(detachNode);
			div7_nodes.forEach(detachNode);
			text35 = claimText(div8_nodes, "\r\n\t");
			if (if_block1) if_block1.l(div8_nodes);
			div8_nodes.forEach(detachNode);
			text36 = claimText(nodes, "\r\n\r\n\r\n");

			div9 = claimElement(nodes, "DIV", { class: true }, false);
			var div9_nodes = children(div9);

			table = claimElement(div9_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr = claimElement(table_nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			th0 = claimElement(tr_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			text37 = claimText(th0_nodes, "Linha");
			th0_nodes.forEach(detachNode);
			text38 = claimText(tr_nodes, "\r\n\t\t\t");

			th1 = claimElement(tr_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			text39 = claimText(th1_nodes, "Tipo");
			th1_nodes.forEach(detachNode);
			text40 = claimText(tr_nodes, "\r\n\t\t\t");

			th2 = claimElement(tr_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			text41 = claimText(th2_nodes, "Hora");
			th2_nodes.forEach(detachNode);
			text42 = claimText(tr_nodes, "\r\n\t\t\t");

			th3 = claimElement(tr_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			text43 = claimText(th3_nodes, "Excluir");
			th3_nodes.forEach(detachNode);
			tr_nodes.forEach(detachNode);
			text44 = claimText(table_nodes, "\r\n\t\t");

			for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
				each_blocks[i_1].l(table_nodes);
			}

			table_nodes.forEach(detachNode);
			div9_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			document.title = "Calculadora";
			span0.className = "icon ion-md-checkmark-circle success svelte-fk0o7";
			addLoc(span0, file, 5, 65, 147);
			addListener(button0, "click", click_handler);
			button0.className = "badge svelte-fk0o7";
			button0.dataset.count = ctx.normais;
			addLoc(button0, file, 5, 1, 83);
			span1.className = "icon ion-md-close-circle warning svelte-fk0o7";
			addLoc(span1, file, 6, 67, 283);
			addListener(button1, "click", click_handler_1);
			button1.className = "badge svelte-fk0o7";
			button1.dataset.count = ctx.fechadas;
			addLoc(button1, file, 6, 1, 217);
			span2.className = "icon ion-md-cog svelte-fk0o7";
			addLoc(span2, file, 7, 29, 377);
			addListener(button2, "click", click_handler_2);
			button2.className = "svelte-fk0o7";
			addLoc(button2, file, 7, 1, 349);
			div0.className = "dock svelte-fk0o7";
			addLoc(div0, file, 4, 0, 62);
			addLoc(h1, file, 11, 1, 462);
			addLoc(i, file, 13, 37, 525);
			addLoc(strong, file, 13, 4, 492);
			addLoc(p, file, 13, 1, 489);
			legend0.className = "svelte-fk0o7";
			addLoc(legend0, file, 20, 4, 680);
			addListener(input0, "change", input0_change_handler);
			setAttribute(input0, "type", "checkbox");
			addLoc(input0, file, 22, 5, 729);
			addLoc(label0, file, 21, 4, 708);
			addLoc(br0, file, 24, 4, 799);
			addLoc(br1, file, 25, 4, 809);
			addLoc(label1, file, 27, 5, 849);
			addListener(input1, "input", input1_input_handler);
			setAttribute(input1, "type", "time");
			addLoc(input1, file, 28, 5, 878);
			div1.className = "container";
			addLoc(div1, file, 26, 4, 819);
			addLoc(br2, file, 30, 4, 939);
			addLoc(label2, file, 32, 5, 979);
			addListener(input2, "input", input2_input_handler);
			setAttribute(input2, "type", "time");
			addLoc(input2, file, 33, 5, 1005);
			div2.className = "container";
			addLoc(div2, file, 31, 4, 949);
			addLoc(fieldset0, file, 19, 3, 664);
			addLoc(div3, file, 18, 2, 654);
			legend1.className = "svelte-fk0o7";
			addLoc(legend1, file, 40, 4, 1115);
			addListener(input3, "change", input3_change_handler);
			setAttribute(input3, "type", "checkbox");
			addLoc(input3, file, 42, 5, 1164);
			addLoc(label3, file, 41, 4, 1143);
			addLoc(br3, file, 44, 4, 1234);
			addLoc(br4, file, 45, 4, 1244);
			addLoc(label4, file, 47, 5, 1284);
			addListener(input4, "input", input4_input_handler);
			setAttribute(input4, "type", "time");
			addLoc(input4, file, 48, 5, 1313);
			div4.className = "container";
			addLoc(div4, file, 46, 4, 1254);
			addLoc(br5, file, 50, 4, 1374);
			addLoc(label5, file, 52, 5, 1414);
			addListener(input5, "input", input5_input_handler);
			setAttribute(input5, "type", "time");
			addLoc(input5, file, 53, 5, 1440);
			div5.className = "container";
			addLoc(div5, file, 51, 4, 1384);
			addLoc(fieldset1, file, 39, 3, 1099);
			addLoc(div6, file, 38, 2, 1089);
			div7.className = "container";
			addLoc(div7, file, 17, 1, 627);
			div8.className = "" + ctx.showConfig + " svelte-fk0o7";
			addLoc(div8, file, 10, 0, 435);
			th0.className = "svelte-fk0o7";
			addLoc(th0, file, 67, 3, 1726);
			th1.className = "svelte-fk0o7";
			addLoc(th1, file, 68, 3, 1745);
			th2.className = "svelte-fk0o7";
			addLoc(th2, file, 69, 3, 1763);
			th3.className = "svelte-fk0o7";
			addLoc(th3, file, 70, 3, 1781);
			tr.className = "svelte-fk0o7";
			addLoc(tr, file, 66, 2, 1717);
			table.className = "svelte-fk0o7";
			addLoc(table, file, 65, 1, 1706);
			div9.className = "" + ctx.showContent + " svelte-fk0o7";
			addLoc(div9, file, 64, 0, 1678);
		},

		m: function mount(target, anchor) {
			insert(target, text0, anchor);
			insert(target, div0, anchor);
			append(div0, button0);
			append(button0, span0);
			append(div0, text1);
			append(div0, button1);
			append(button1, span1);
			append(div0, text2);
			append(div0, button2);
			append(button2, span2);
			insert(target, text3, anchor);
			insert(target, div8, anchor);
			append(div8, h1);
			append(h1, text4);
			append(div8, text5);
			append(div8, p);
			append(p, strong);
			append(strong, text6);
			append(strong, i);
			append(i, text7);
			append(div8, text8);
			if (if_block0) if_block0.m(div8, null);
			append(div8, text9);
			append(div8, div7);
			append(div7, div3);
			append(div3, fieldset0);
			append(fieldset0, legend0);
			append(legend0, text10);
			append(fieldset0, text11);
			append(fieldset0, label0);
			append(label0, text12);
			append(label0, input0);

			input0.checked = ctx.manha.ativado;

			append(fieldset0, text13);
			append(fieldset0, br0);
			append(fieldset0, text14);
			append(fieldset0, br1);
			append(fieldset0, text15);
			append(fieldset0, div1);
			append(div1, label1);
			append(label1, text16);
			append(div1, text17);
			append(div1, input1);

			input1.value = ctx.manha.inicio;

			append(fieldset0, text18);
			append(fieldset0, br2);
			append(fieldset0, text19);
			append(fieldset0, div2);
			append(div2, label2);
			append(label2, text20);
			append(div2, text21);
			append(div2, input2);

			input2.value = ctx.manha.fim;

			append(div7, text22);
			append(div7, div6);
			append(div6, fieldset1);
			append(fieldset1, legend1);
			append(legend1, text23);
			append(fieldset1, text24);
			append(fieldset1, label3);
			append(label3, text25);
			append(label3, input3);

			input3.checked = ctx.tarde.ativado;

			append(fieldset1, text26);
			append(fieldset1, br3);
			append(fieldset1, text27);
			append(fieldset1, br4);
			append(fieldset1, text28);
			append(fieldset1, div4);
			append(div4, label4);
			append(label4, text29);
			append(div4, text30);
			append(div4, input4);

			input4.value = ctx.tarde.inicio;

			append(fieldset1, text31);
			append(fieldset1, br5);
			append(fieldset1, text32);
			append(fieldset1, div5);
			append(div5, label5);
			append(label5, text33);
			append(div5, text34);
			append(div5, input5);

			input5.value = ctx.tarde.fim;

			append(div8, text35);
			if (if_block1) if_block1.m(div8, null);
			insert(target, text36, anchor);
			insert(target, div9, anchor);
			append(div9, table);
			append(table, tr);
			append(tr, th0);
			append(th0, text37);
			append(tr, text38);
			append(tr, th1);
			append(th1, text39);
			append(tr, text40);
			append(tr, th2);
			append(th2, text41);
			append(tr, text42);
			append(tr, th3);
			append(th3, text43);
			append(table, text44);

			for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
				each_blocks[i_1].i(table, null);
			}

			current = true;
		},

		p: function update(changed, _ctx) {
			ctx = _ctx;
			if (!current || changed.normais) {
				button0.dataset.count = ctx.normais;
			}

			if (!current || changed.fechadas) {
				button1.dataset.count = ctx.fechadas;
			}

			if (ctx.normais != 0) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_2(component, ctx);
					if_block0.c();
					if_block0.m(div8, text9);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (changed.manha) input0.checked = ctx.manha.ativado;
			if (!input1_updating && changed.manha) input1.value = ctx.manha.inicio;
			if (!input2_updating && changed.manha) input2.value = ctx.manha.fim;
			if (changed.tarde) input3.checked = ctx.tarde.ativado;
			if (!input4_updating && changed.tarde) input4.value = ctx.tarde.inicio;
			if (!input5_updating && changed.tarde) input5.value = ctx.tarde.fim;

			if (!(ctx.manha.ativado || ctx.tarde.ativado)) {
				if (!if_block1) {
					if_block1 = create_if_block_1(component, ctx);
					if_block1.c();
					if_block1.m(div8, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || changed.showConfig) {
				div8.className = "" + ctx.showConfig + " svelte-fk0o7";
			}

			if (changed.vistorias) {
				each_value = ctx.vistorias;

				for (var i_1 = 0; i_1 < each_value.length; i_1 += 1) {
					const child_ctx = get_each_context(ctx, each_value, i_1);

					if (each_blocks[i_1]) {
						each_blocks[i_1].p(changed, child_ctx);
					} else {
						each_blocks[i_1] = create_each_block(component, child_ctx);
						each_blocks[i_1].c();
					}
					each_blocks[i_1].i(table, null);
				}

				groupOutros();
				for (; i_1 < each_blocks.length; i_1 += 1) outroBlock(i_1, 1);
			}

			if (!current || changed.showContent) {
				div9.className = "" + ctx.showContent + " svelte-fk0o7";
			}
		},

		i: function intro(target, anchor) {
			if (current) return;

			this.m(target, anchor);
		},

		o: run,

		d: function destroy(detach) {
			if (detach) {
				detachNode(text0);
				detachNode(div0);
			}

			removeListener(button0, "click", click_handler);
			removeListener(button1, "click", click_handler_1);
			removeListener(button2, "click", click_handler_2);
			if (detach) {
				detachNode(text3);
				detachNode(div8);
			}

			if (if_block0) if_block0.d();
			removeListener(input0, "change", input0_change_handler);
			removeListener(input1, "input", input1_input_handler);
			removeListener(input2, "input", input2_input_handler);
			removeListener(input3, "change", input3_change_handler);
			removeListener(input4, "input", input4_input_handler);
			removeListener(input5, "input", input5_input_handler);
			if (if_block1) if_block1.d();
			if (detach) {
				detachNode(text36);
				detachNode(div9);
			}

			destroyEach(each_blocks, detach);
		}
	};
}

// (16:1) {#if normais != 0}
function create_if_block_2(component, ctx) {
	var p, text0, text1;

	return {
		c: function create() {
			p = createElement("p");
			text0 = createText("Tempo médio por Vistoria N: ");
			text1 = createText(ctx.media);
			this.h();
		},

		l: function claim(nodes) {
			p = claimElement(nodes, "P", {}, false);
			var p_nodes = children(p);

			text0 = claimText(p_nodes, "Tempo médio por Vistoria N: ");
			text1 = claimText(p_nodes, ctx.media);
			p_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			addLoc(p, file, 15, 19, 575);
		},

		m: function mount(target, anchor) {
			insert(target, p, anchor);
			append(p, text0);
			append(p, text1);
		},

		p: function update(changed, ctx) {
			if (changed.media) {
				setData(text1, ctx.media);
			}
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(p);
			}
		}
	};
}

// (59:1) {#if !(manha.ativado || tarde.ativado)}
function create_if_block_1(component, ctx) {
	var p, text;

	return {
		c: function create() {
			p = createElement("p");
			text = createText("Erro. Não há período ativo. Ative ao menos um dos períodos.");
			this.h();
		},

		l: function claim(nodes) {
			p = claimElement(nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			text = claimText(p_nodes, "Erro. Não há período ativo. Ative ao menos um dos períodos.");
			p_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			p.className = "warning-msg svelte-fk0o7";
			addLoc(p, file, 59, 1, 1572);
		},

		m: function mount(target, anchor) {
			insert(target, p, anchor);
			append(p, text);
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(p);
			}
		}
	};
}

// (79:4) {:else}
function create_else_block(component, ctx) {
	var button;

	return {
		c: function create() {
			button = createElement("button");
			this.h();
		},

		l: function claim(nodes) {
			button = claimElement(nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			button_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			button._svelte = { component, ctx };

			addListener(button, "click", click_handler_1);
			button.className = "icon ion-md-close-circle warning svelte-fk0o7";
			addLoc(button, file, 79, 4, 2084);
		},

		m: function mount(target, anchor) {
			insert(target, button, anchor);
		},

		p: function update(changed, _ctx) {
			ctx = _ctx;
			button._svelte.ctx = ctx;
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(button);
			}

			removeListener(button, "click", click_handler_1);
		}
	};
}

// (77:4) {#if vistoria.normal}
function create_if_block(component, ctx) {
	var button;

	return {
		c: function create() {
			button = createElement("button");
			this.h();
		},

		l: function claim(nodes) {
			button = claimElement(nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			button_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			button._svelte = { component, ctx };

			addListener(button, "click", click_handler);
			button.className = "icon ion-md-checkmark-circle success svelte-fk0o7";
			addLoc(button, file, 77, 4, 1972);
		},

		m: function mount(target, anchor) {
			insert(target, button, anchor);
		},

		p: function update(changed, _ctx) {
			ctx = _ctx;
			button._svelte.ctx = ctx;
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(button);
			}

			removeListener(button, "click", click_handler);
		}
	};
}

// (73:2) {#each vistorias as vistoria}
function create_each_block(component, ctx) {
	var tr, td0, text0_value = ctx.vistorias.findIndex(obj => obj.id == ctx.vistoria.id)+1, text0, text1, td1, text2, td2, text3_value = ctx.vistoria.hora, text3, text4, td3, button, text5, tr_transition, current;

	function select_block_type(ctx) {
		if (ctx.vistoria.normal) return create_if_block;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block = current_block_type(component, ctx);

	return {
		c: function create() {
			tr = createElement("tr");
			td0 = createElement("td");
			text0 = createText(text0_value);
			text1 = createText("\r\n\t\t\t");
			td1 = createElement("td");
			if_block.c();
			text2 = createText("\r\n\t\t\t");
			td2 = createElement("td");
			text3 = createText(text3_value);
			text4 = createText("\r\n\t\t\t");
			td3 = createElement("td");
			button = createElement("button");
			text5 = createText("\r\n\t\t");
			this.h();
		},

		l: function claim(nodes) {
			tr = claimElement(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claimElement(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			text0 = claimText(td0_nodes, text0_value);
			td0_nodes.forEach(detachNode);
			text1 = claimText(tr_nodes, "\r\n\t\t\t");

			td1 = claimElement(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			if_block.l(td1_nodes);
			td1_nodes.forEach(detachNode);
			text2 = claimText(tr_nodes, "\r\n\t\t\t");

			td2 = claimElement(tr_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			text3 = claimText(td2_nodes, text3_value);
			td2_nodes.forEach(detachNode);
			text4 = claimText(tr_nodes, "\r\n\t\t\t");

			td3 = claimElement(tr_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			button = claimElement(td3_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			button_nodes.forEach(detachNode);
			td3_nodes.forEach(detachNode);
			text5 = claimText(tr_nodes, "\r\n\t\t");
			tr_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			td0.className = "svelte-fk0o7";
			addLoc(td0, file, 74, 3, 1868);
			td1.className = "svelte-fk0o7";
			addLoc(td1, file, 75, 3, 1935);
			td2.className = "svelte-fk0o7";
			addLoc(td2, file, 82, 3, 2199);

			button._svelte = { component, ctx };

			addListener(button, "click", click_handler_2);
			button.className = "icon ion-md-trash svelte-fk0o7";
			addLoc(button, file, 83, 7, 2232);
			td3.className = "svelte-fk0o7";
			addLoc(td3, file, 83, 3, 2228);
			tr.className = "svelte-fk0o7";
			addLoc(tr, file, 73, 2, 1843);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, text0);
			append(tr, text1);
			append(tr, td1);
			if_block.m(td1, null);
			append(tr, text2);
			append(tr, td2);
			append(td2, text3);
			append(tr, text4);
			append(tr, td3);
			append(td3, button);
			append(tr, text5);
			current = true;
		},

		p: function update(changed, _ctx) {
			ctx = _ctx;
			if ((!current || changed.vistorias) && text0_value !== (text0_value = ctx.vistorias.findIndex(obj => obj.id == ctx.vistoria.id)+1)) {
				setData(text0, text0_value);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(component, ctx);
				if_block.c();
				if_block.m(td1, null);
			}

			if ((!current || changed.vistorias) && text3_value !== (text3_value = ctx.vistoria.hora)) {
				setData(text3, text3_value);
			}

			button._svelte.ctx = ctx;
		},

		i: function intro(target, anchor) {
			if (current) return;
			if (component.root._intro) {
				if (tr_transition) tr_transition.invalidate();

				component.root._aftercreate.push(() => {
					if (!tr_transition) tr_transition = wrapTransition(component, tr, fade, {}, true);
					tr_transition.run(1);
				});
			}
			this.m(target, anchor);
		},

		o: function outro(outrocallback) {
			if (!current) return;

			if (!tr_transition) tr_transition = wrapTransition(component, tr, fade, {}, false);
			tr_transition.run(0, () => {
				outrocallback();
				tr_transition = null;
			});

			current = false;
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(tr);
			}

			if_block.d();
			removeListener(button, "click", click_handler_2);
			if (detach) {
				if (tr_transition) tr_transition.abort();
			}
		}
	};
}

function Index(options) {
	this._debugName = '<Index>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign(data(), options.data);

	this._recompute({ config: 1, vistorias: 1, manha: 1, tarde: 1 }, this._state);
	if (!('config' in this._state)) console.warn("<Index> was created without expected data property 'config'");
	if (!('vistorias' in this._state)) console.warn("<Index> was created without expected data property 'vistorias'");
	if (!('manha' in this._state)) console.warn("<Index> was created without expected data property 'manha'");
	if (!('tarde' in this._state)) console.warn("<Index> was created without expected data property 'tarde'");
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(Index.prototype, protoDev);
assign(Index.prototype, methods);

Index.prototype._checkReadOnly = function _checkReadOnly(newState) {
	if ('showConfig' in newState && !this._updatingReadonlyProperty) throw new Error("<Index>: Cannot set read-only property 'showConfig'");
	if ('showContent' in newState && !this._updatingReadonlyProperty) throw new Error("<Index>: Cannot set read-only property 'showContent'");
	if ('normais' in newState && !this._updatingReadonlyProperty) throw new Error("<Index>: Cannot set read-only property 'normais'");
	if ('fechadas' in newState && !this._updatingReadonlyProperty) throw new Error("<Index>: Cannot set read-only property 'fechadas'");
	if ('media' in newState && !this._updatingReadonlyProperty) throw new Error("<Index>: Cannot set read-only property 'media'");
	if ('update' in newState && !this._updatingReadonlyProperty) throw new Error("<Index>: Cannot set read-only property 'update'");
};

Index.prototype._recompute = function _recompute(changed, state) {
	if (changed.config) {
		if (this._differs(state.showConfig, (state.showConfig = showConfig(state)))) changed.showConfig = true;
		if (this._differs(state.showContent, (state.showContent = showContent(state)))) changed.showContent = true;
	}

	if (changed.vistorias) {
		if (this._differs(state.normais, (state.normais = normais(state)))) changed.normais = true;
		if (this._differs(state.fechadas, (state.fechadas = fechadas(state)))) changed.fechadas = true;
	}

	if (changed.vistorias || changed.manha || changed.tarde) {
		if (this._differs(state.media, (state.media = media_1(state)))) changed.media = true;
		if (this._differs(state.update, (state.update = update_1(state)))) changed.update = true;
	}
};

export default Index;
